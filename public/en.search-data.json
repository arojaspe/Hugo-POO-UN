{"/about/":{"data":{"":" ℹ️ In this site, you will find essential resources to master the exciting world of object-oriented programming. This documentation platform emerged in 2023 as a response to the growing need to centralize all the educational resources produced by the university. Our primary goal was to create a unified and easily accessible hub for students to access a wealth of educational content and concepts. Why We Created This Site:\nThis documentation platform emerged from our commitment to enhancing the teaching and learning experience of our Object-Oriented Programming course. We wanted to explore new ways of delivering the course content by leveraging modern technology and platforms. Our goal is to make learning about object-oriented programming more accessible and engaging for everyone.\nWhat are our objectives:\nCreate digital resources that support learning-teaching activities within the object-oriented programming courses at Universidad Nacional de Colombia. Encourage their own digital resources and integrate them with our work. Promote student-centered learning methods, including active learning, flipped classroom, and problem-based learning. What we offer:\nFundamental Concepts: Learn the pillars of object-oriented programming, from classes and objects to encapsulation and inheritance.\nPractical Examples: Dive into code examples with real-world scenarios to understand how to apply these concepts to your own projects.\nProgramming Languages: Explore examples in different languages, allowing you to apply these concepts in the programming language that suits you best.\nComprehensive Documentation: Navigate through detailed and organized documentation covering every aspect of object-oriented programming.\nFrequently Asked Questions: Find answers to common questions that arise when exploring this topic.\nStart your learning journey today and discover how object-oriented programming can revolutionize your approach to software development.\nWe are here to assist you every step of the way!\nStart here with contents Practice "},"title":"About course"},"/about/profesores/":{"data":{"":"Jairo Hernán Aponte, PhD site\nAssociate-professor: Systems and Industrial Engineering Department | Engineering Faculty | Universidad Nacional de Colombia Jean Pierre Charalambos, PhD\nAssociate-professor: Systems and Industrial Engineering Department | Engineering Faculty | Universidad Nacional de Colombia "},"title":"Involved teachers"},"/docs/":{"data":{"":"","what-is-object-oriented-programming-oop#What is Object-Oriented Programming (OOP)?":"","why-is-object-oriented-programming-important#Why is Object-Oriented Programming important?":" ℹ️ Welcome to our comprehensive Object-Oriented Programming (OOP) Course! In this course, you’ll not only master the fundamental skills of OOP but also explore various methodologies to effectively apply these concepts in real-world problem-solving. Gain hands-on experience with practical coding exercises, in-depth theoretical explanations, and industry-focused interview preparation. What is Object-Oriented Programming (OOP)? Object-Oriented Programming (OOP) is a programming model that arranges software design around data, or objects, rather than functions and logic. In this approach, an object is defined as a data field with unique attributes (properties) and behavior (methods).\nOOP focuses on the objects that developers want to manipulate, rather than the logic required to manipulate them. This approach is particularly useful for large, complex programs that require constant updates or maintenance. Areas of application include manufacturing and design programs, as well as mobile applications. For example, OOP can be applied to develop manufacturing system simulation software.\nWhy is Object-Oriented Programming important? Object-Oriented Programming (OOP) is important for several reasons:\nReal-world modeling: OOP provides a programming model that reflects how we think about the real world. Objects and classes in OOP can represent real-world entities and concepts naturally, making it easier to understand the code and its relationship to the problem it is solving.\nEncapsulation and information hiding: OOP allows data and functions to be encapsulated within objects, meaning that the internal implementation of an object can be hidden from the outside. This promotes modularity and reduces complexity by providing a clear and consistent interface for interacting with objects.\nFacilitates collaboration: OOP facilitates collaboration among development teams by providing a clear and consistent structure for software design and implementation. Well-defined objects and clear interface contracts allow teams to work independently on different parts of the code.\nFacilitates code maintenance: OOP makes it easier to make changes to the code, as objects and classes are designed to be modular and cohesive. This makes it easier to add new features, fix bugs, and perform updates to existing software.\nScalability: OOP provides a scalable approach to software development, making it easier to manage and extend large and complex projects. It allows for the creation of modular components that can be developed and tested independently.\nOverall, OOP enhances code organization, promotes code reusability, improves code reliability, and simplifies software development. It is widely used in various domains, including software engineering, game development, web development, and more.\nTo truly harness the power of OOP, it’s essential to understand its foundational principles. We invite you to begin your journey by exploring the basic concepts and main principles of OOP:\nBasic Concepts Main Principles "},"title":"Introduction"},"/docs/basic-concepts/":{"data":{"":"","#":" ℹ️ Object-Oriented Programming (OOP) relies on fundamental concepts that are essential for building and managing software systems. Object-Oriented Programming (OOP) is built upon a foundation of core concepts that shape how software is designed, structured, and implemented. These fundamental ideas are essential for creating robust, maintainable, and scalable applications.\nWhen learning OOP, it’s crucial to have a strong understanding of the basic concepts that drive this programming paradigm. These include objects, classes, attributes, methods, and more. Each of these concepts plays a unique role in organizing and managing code effectively.\nTo guide your learning journey, we’ll use a common example: a BankAccount. This example will help illustrate how these basic concepts come together to create a functional and cohesive system.\nReady to learn more? Now that you’ve been introduced to the foundational ideas of OOP, it’s time to dive deeper into each concept. Mastering these basics will set the stage for building powerful applications that follow best practices in software design. Let’s start with a core concept, Classes.\nClasses "},"title":"Basic Concepts"},"/docs/basic-concepts/attributes/":{"data":{"":"","attributes-in-object-oriented-programming#Attributes in Object-Oriented Programming":"Attributes in Object-Oriented Programming Attributes, also known as properties or fields, are the characteristics or data associated with an object in Object-Oriented Programming (OOP). They represent the state of an object and define its behavior.\nExample: Bank Account Class Let’s delve into the concept of attributes using the example of a BankAccount.\nAttributes Concept: Attributes are characteristics or properties that describe the objects created from a class. In our example, a bank account object would have various attributes that define its state, such as account_number, balance, and account_holder.\nBank Account Attributes: Consider the attributes of a bank account object:\nAccount Number:\nThis attribute uniquely identifies each bank account. Example: 123456789 Balance:\nThis attribute represents the amount of money currently in the bank account. Example: $1000 Account Holder:\nThis attribute specifies the name of the person who owns the bank account. Example: John Doe Bank Account Class: When we define the BankAccount class, we specify these attributes as part of its structure. Each bank account object created from this class will have its own set of attribute values, allowing us to differentiate between different accounts.\nFor instance, if we create a bank account object for John Doe, it will have an account_number of 123456789, a balance of $1000, and an account_holder name of John Doe. These attributes collectively describe the state of the bank account object."},"title":"Attributes"},"/docs/basic-concepts/class/":{"data":{"":"","#":" ℹ️ A class is a user-defined data type. It consists of data members and member functions, which can be accessed and used by creating an instance of that class. It represents the set of properties or methods that are common to all objects of one type. Let’s consider the concept of a class using the example of a BankAccount.\nA class is like a blueprint or template for creating objects. In our example, the BankAccount class represents the blueprint for creating individual bank account objects.\nㅤㅤㅤㅤㅤBankAccountㅤㅤㅤㅤㅤ int account_number int balance string account_holder + deposit(amount) + withdraw(amount) Attributes: Attributes are characteristics or properties that describe the objects created from the class. For instance, in the case of a BankAccount, attributes could include account_number, balance, and account_holder. Methods: Methods are functions that define the behavior of the objects created from the class. In the context of a BankAccount, methods could include operations like deposit and withdraw, which specify how money can be added to or withdrawn from an account. This class blueprint defines the structure for creating BankAccount objects. Each object instantiated from this class inherits attributes such as account number, balance, and account holder. Additionally, the methods such as deposit() and withdraw(), enable the objects to perform operations like adding or withdrawing money."},"title":"Classes"},"/docs/basic-concepts/methods/":{"data":{"":"","#":"Methods in Object-Oriented Programming Methods are an essential part of object-oriented programming (OOP). They are functions that are associated with a specific class or object and are used to perform actions or provide behavior for that class or object.\nExample: Bank Account Class Let’s say we have a class called BankAccount. This class represents a bank account, and it has methods to perform banking operations like depositing money and withdrawing money.\nDepositing Money: Method Name: deposit What it does: Adds money to the bank account. For Example: If you want to put $100 into your bank account, you would use the deposit method. Withdrawing Money: Method Name: withdraw What it does: Takes money out of the bank account, but only if there’s enough money in the account. For Example: If you want to take out $50 from your bank account, you would use the withdraw method. But if you only have $30 in your account, you can’t withdraw $50 because you don’t have enough money. Bank Account Operations Let’s walk through some simple operations you can do with your bank account:\nDepositing Funds: You get your paycheck and want to put $500 into your bank account. You’d use the deposit method to add $500 to your account balance. Withdrawing Funds: You need to pay your monthly bills, so you withdraw $200 from your bank account. You’d use the withdraw method to take out $200 from your account balance. But if you try to withdraw $500 when you only have $300 in your account, you can’t do it because you don’t have enough money. "},"title":"Methods"},"/docs/basic-concepts/object/":{"data":{"":"","#":"In object-oriented programming (OOP), an object is an instance of a class. It represents a real-world entity with its own set of properties (attributes) and behaviors (methods). Objects are the building blocks of OOP and are used to model and interact with the system.\nExample: Bank Account Class Remember that we have a class called BankAccount. This class represents a bank account, and it has methods to perform banking operations like depositing money and withdrawing money.\nIn our example, an object is an instance of the BankAccount class. Each individual bank account created from the BankAccount class is an object.\nAttributes:\nEach bank account object has its own set of attributes that describe its specific state. For instance, each bank account object might have attributes like account_number, balance, and account_holder. Methods:\nObjects have access to the methods defined by their class. These methods define the behavior or actions that objects can perform. For example, each bank account object can use methods like deposit and withdraw to manage its funds. Example: Suppose we create two bank account objects from the BankAccount class:\nㅤㅤㅤㅤㅤAccount 1ㅤㅤㅤㅤㅤ ㅤㅤㅤㅤㅤAccount 2ㅤㅤㅤㅤㅤ account_number: 123456 balance: $500 account_holder: John Doe account_number: 789012 balance: $1000 account_holder: Jane Smith +deposit(amount) +withdraw(amount) +deposit(amount) +withdraw(amount) Each bank account object represents a distinct bank account with its own unique attributes and behaviors. For example, Account 1 and Account 2 have different account numbers, balances, and account olders. They can each independently use the deposit and withdraw methods to manage their funds."},"title":"Object"},"/docs/main-principles/":{"data":{"":"","main-principles-of-object-oriented-programming-oop#Main principles of Object-Oriented Programming (OOP):":"Main principles of Object-Oriented Programming (OOP): Encapsulation: Encapsulation is the process of hiding the internal details of an object and exposing only the necessary information or functionality. It helps in achieving data abstraction and provides better control over the data.\nInheritance: Inheritance allows objects to inherit properties and behaviors from a parent class. It promotes code reusability and helps in creating a hierarchical structure of classes.\nPolymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables the use of a single interface to represent different types of objects, providing flexibility and extensibility.\nAbstraction: Abstraction focuses on representing the essential features of an object, while hiding the unnecessary details. It helps in managing complexity and simplifies the development process.\nThese principles form the foundation of OOP and are essential for building modular, maintainable, and scalable software systems.\nℹ️ Below you’ll learn the main principles of object-oriented programming for problem-solving. Choose the principle of your interest from the buttons below:\nEncapsulation Inheritance Polymorphism Abstraction "},"title":"Main principles"},"/methodologies/":{"data":{"":"Here you’ll find practical exercises related to the course contents\nJavascript exercises Python exercises "},"title":"Practice module"},"/methodologies/javascript-practice/":{"data":{"":"Here you’ll find all OOP-related exercises in Javascript.\nFirst exercise Second exercise Third exercise Fourth exercise Fifth exercise Sixth exercise "},"title":"Javascript practice module"},"/methodologies/javascript-practice/firstjs/":{"data":{"":" 🎖️ Write a JavaScript program to create a class called “Person” with properties for name, age and country. Include a method to display the person’s details. Create two instances of the ‘Person’ class and display their details. Plain code approach\nExplanationSolution In the above exercise we create a “Person” class with properties for name, age, and country. It includes a method to display the person’s details.\nFinally it creates two instances of the Person class and displays their details using the displayDetails() method. Solution:\nclass Person { constructor(name, age, country) { this.name = name; this.age = age; this.country = country; } displayDetails() { console.log(`Name: ${this.name}`); console.log(`Age: ${this.age}`); console.log(`Country: ${this.country}`); } } // Create instances of the Person class const person1 = new Person('Francisca Rohan', 25, 'USA'); const person2 = new Person('Raimond Aruna', 30, 'Netherlands'); // Display details of person1 console.log('Person-1 Details:'); person1.displayDetails(); // Display details of person2 console.log('\\nPerson-2 Details:'); person2.displayDetails(); Sample output\n\"Person-1 Details:\" \"Name: Francisca Rohan\" \"Age: 25\" \"Country: USA\" \" Person-2 Details:\" \"Name: Raimond Aruna\" \"Age: 30\" \"Country: Netherlands\" Write your solution below\nSolution in Codepen "},"title":"Exercise 1"},"/methodologies/javascript-practice/secondjs/":{"data":{"":" 🎖️ Write a JavaScript program to create a class called ‘Rectangle’ with properties for width and height. Include two methods to calculate rectangle area and perimeter. Create an instance of the ‘Rectangle’ class and calculate its area and perimeter. ExplanationSolution In the above exercise we create a “Person” class with properties for name, age, and country. It includes a method to display the person’s details.\nFinally it creates two instances of the Person class and displays their details using the displayDetails() method. Solution:\nclass Rectangle { constructor(width, height) { this.width = width; this.height = height; } calculateArea() { return this.width * this.height; } calculatePerimeter() { return 2 * (this.width + this.height); } } // Create an instance of the Rectangle class const rectangle = new Rectangle(12, 10); // Calculate area and perimeter of the rectangle const area = rectangle.calculateArea(); const perimeter = rectangle.calculatePerimeter(); // Display the results console.log(`Rectangle Area: ${area}`); console.log(`Rectangle Perimeter: ${perimeter}`); Sample output\n\"Rectangle Area: 120\" \"Rectangle Perimeter: 44\" Write your solution below\nSolution in Codepen "},"title":"Exercise 2"},"/methodologies/languages/":{"data":{"":"","languages#Languages":"graph TD\rA[Starting poing] --\u003e X(Learn the OOP basics)\rX --\u003e B(Choose language and approach)\rB --\u003e C[Python]\rB --\u003e D[Java]\rB --\u003e E[C++]\rB --\u003e F[JavaScript]\rF --\u003e G(Processing)\rF --\u003e H(P5.js)\rC --\u003e I(Arcade)\rC --\u003e J(Pygame) Languages Explore the following sections to start adding more contents:\nJava Python Javascript C++ "},"title":"Language selection"},"/methodologies/languages/cpp/":{"data":{"abstraction#Abstraction":"","class-and-object#Class and object":"","encapsulation#Encapsulation":"","example#Example":"Object-oriented programming course Class and object codepublic class GFG { static String Employee_name; static float Employee_salary; static void set(String n, float p) { Employee_name = n; Employee_salary = p; } static void get() { System.out.println(\"Employee name is: \" +Employee_name ); System.out.println(\"Employee CTC is: \" + Employee_salary); } public static void main(String args[]) { GFG.set(\"Rathod Avinash\", 10000.0f); GFG.get(); } } Output Employee name is: Rathod Avinash\rEmployee CTC is: 10000.0 Abstraction Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.\nData Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.\n//abstract class abstract class GFG{ //abstract methods declaration abstract void add(); abstract void mul(); abstract void div(); } Encapsulation It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together the code and the data it manipulates. Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield.\n//Encapsulation using private modifier //Employee class contains private data called employee id and employee name class Employee { private int empid; private String ename; } Inheritance Inheritance is an important pillar of OOP (Object Oriented Programming). It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.\n//base class or parent class or super class class A{ //parent class methods void method1(){} void method2(){} } //derived class or child class or base class class B extends A{ //Inherits parent class methods //child class methods void method3(){} void method4(){} } Example // Java program to Demonstrate Polymorphism // This class will contain // 3 methods with same name, // yet the program will // compile \u0026 run successfully public class Sum { // Overloaded sum(). // This sum takes two int parameters public int sum(int x, int y) { return (x + y); } // Overloaded sum(). // This sum takes three int parameters public int sum(int x, int y, int z) { return (x + y + z); } // Overloaded sum(). // This sum takes two double parameters public double sum(double x, double y) { return (x + y); } // Driver code public static void main(String args[]) { Sum s = new Sum(); System.out.println(s.sum(10, 20)); System.out.println(s.sum(10, 20, 30)); System.out.println(s.sum(10.5, 20.5)); } } Output 30\r60\r31.0 ","inheritance#Inheritance":"","object-oriented-programming-course#Object-oriented programming course":""},"title":"C++"},"/methodologies/languages/java/":{"data":{"abstraction#Abstraction":"","class-and-object#Class and object":"","encapsulation#Encapsulation":"","example#Example":"Object-oriented programming course Class and object codepublic class GFG { static String Employee_name; static float Employee_salary; static void set(String n, float p) { Employee_name = n; Employee_salary = p; } static void get() { System.out.println(\"Employee name is: \" +Employee_name ); System.out.println(\"Employee CTC is: \" + Employee_salary); } public static void main(String args[]) { GFG.set(\"Rathod Avinash\", 10000.0f); GFG.get(); } } Output Employee name is: Rathod Avinash\rEmployee CTC is: 10000.0 Abstraction Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.\nData Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.\n//abstract class abstract class GFG{ //abstract methods declaration abstract void add(); abstract void mul(); abstract void div(); } Encapsulation It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together the code and the data it manipulates. Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield.\n//Encapsulation using private modifier //Employee class contains private data called employee id and employee name class Employee { private int empid; private String ename; } Inheritance Inheritance is an important pillar of OOP (Object Oriented Programming). It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.\n//base class or parent class or super class class A{ //parent class methods void method1(){} void method2(){} } //derived class or child class or base class class B extends A{ //Inherits parent class methods //child class methods void method3(){} void method4(){} } Example // Java program to Demonstrate Polymorphism // This class will contain // 3 methods with same name, // yet the program will // compile \u0026 run successfully public class Sum { // Overloaded sum(). // This sum takes two int parameters public int sum(int x, int y) { return (x + y); } // Overloaded sum(). // This sum takes three int parameters public int sum(int x, int y, int z) { return (x + y + z); } // Overloaded sum(). // This sum takes two double parameters public double sum(double x, double y) { return (x + y); } // Driver code public static void main(String args[]) { Sum s = new Sum(); System.out.println(s.sum(10, 20)); System.out.println(s.sum(10, 20, 30)); System.out.println(s.sum(10.5, 20.5)); } } Output 30\r60\r31.0 ","inheritance#Inheritance":"","object-oriented-programming-course#Object-oriented programming course":""},"title":"Java"},"/methodologies/languages/javascript/":{"data":{"abstraction#Abstraction":"","class-and-object#Class and object":"","encapsulation#Encapsulation":"","example#Example":"Object-oriented programming course Class and object codepublic class GFG { static String Employee_name; static float Employee_salary; static void set(String n, float p) { Employee_name = n; Employee_salary = p; } static void get() { System.out.println(\"Employee name is: \" +Employee_name ); System.out.println(\"Employee CTC is: \" + Employee_salary); } public static void main(String args[]) { GFG.set(\"Rathod Avinash\", 10000.0f); GFG.get(); } } Output Employee name is: Rathod Avinash\rEmployee CTC is: 10000.0 Abstraction Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.\nData Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.\n//abstract class abstract class GFG{ //abstract methods declaration abstract void add(); abstract void mul(); abstract void div(); } Encapsulation It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together the code and the data it manipulates. Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield.\n//Encapsulation using private modifier //Employee class contains private data called employee id and employee name class Employee { private int empid; private String ename; } Inheritance Inheritance is an important pillar of OOP (Object Oriented Programming). It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.\n//base class or parent class or super class class A{ //parent class methods void method1(){} void method2(){} } //derived class or child class or base class class B extends A{ //Inherits parent class methods //child class methods void method3(){} void method4(){} } Example // Java program to Demonstrate Polymorphism // This class will contain // 3 methods with same name, // yet the program will // compile \u0026 run successfully public class Sum { // Overloaded sum(). // This sum takes two int parameters public int sum(int x, int y) { return (x + y); } // Overloaded sum(). // This sum takes three int parameters public int sum(int x, int y, int z) { return (x + y + z); } // Overloaded sum(). // This sum takes two double parameters public double sum(double x, double y) { return (x + y); } // Driver code public static void main(String args[]) { Sum s = new Sum(); System.out.println(s.sum(10, 20)); System.out.println(s.sum(10, 20, 30)); System.out.println(s.sum(10.5, 20.5)); } } Output 30\r60\r31.0 ","inheritance#Inheritance":"","object-oriented-programming-course#Object-oriented programming course":""},"title":"Javascript"},"/methodologies/languages/python/":{"data":{"abstraction#Abstraction":"","class-and-object#Class and object":"","encapsulation#Encapsulation":"","example#Example":"Object-oriented programming course Class and object codepublic class GFG { static String Employee_name; static float Employee_salary; static void set(String n, float p) { Employee_name = n; Employee_salary = p; } static void get() { System.out.println(\"Employee name is: \" +Employee_name ); System.out.println(\"Employee CTC is: \" + Employee_salary); } public static void main(String args[]) { GFG.set(\"Rathod Avinash\", 10000.0f); GFG.get(); } } Output Employee name is: Rathod Avinash\rEmployee CTC is: 10000.0 Abstraction Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.\nData Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.\n//abstract class abstract class GFG{ //abstract methods declaration abstract void add(); abstract void mul(); abstract void div(); } Encapsulation It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together the code and the data it manipulates. Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield.\n//Encapsulation using private modifier //Employee class contains private data called employee id and employee name class Employee { private int empid; private String ename; } Inheritance Inheritance is an important pillar of OOP (Object Oriented Programming). It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.\n//base class or parent class or super class class A{ //parent class methods void method1(){} void method2(){} } //derived class or child class or base class class B extends A{ //Inherits parent class methods //child class methods void method3(){} void method4(){} } Example // Java program to Demonstrate Polymorphism // This class will contain // 3 methods with same name, // yet the program will // compile \u0026 run successfully public class Sum { // Overloaded sum(). // This sum takes two int parameters public int sum(int x, int y) { return (x + y); } // Overloaded sum(). // This sum takes three int parameters public int sum(int x, int y, int z) { return (x + y + z); } // Overloaded sum(). // This sum takes two double parameters public double sum(double x, double y) { return (x + y); } // Driver code public static void main(String args[]) { Sum s = new Sum(); System.out.println(s.sum(10, 20)); System.out.println(s.sum(10, 20, 30)); System.out.println(s.sum(10.5, 20.5)); } } Output 30\r60\r31.0 ","inheritance#Inheritance":"","object-oriented-programming-course#Object-oriented programming course":""},"title":"Python"},"/methodologies/python-practice/":{"data":{"":"Here you’ll find all OOP-related exercises in Python.\nFirst exercise Second exercise Third exercise Fourth exercise Fifth exercise Sixth exercise "},"title":"Python practice module"},"/methodologies/python-practice/firstpython/":{"data":{"":" 🎖️ Write a Python program to create a class representing a Circle. Include methods to calculate its area and perimeter. Plain code approach\nExplanationSolution In the above exercise we create a “Person” class with properties for name, age, and country. It includes a method to display the person’s details.\nFinally it creates two instances of the Person class and displays their details using the displayDetails() method. Solution:\n# Import the math module to access mathematical functions like pi import math # Define a class called Circle to represent a circle class Circle: # Initialize the Circle object with a given radius def __init__(self, radius): self.radius = radius # Calculate and return the area of the circle using the formula: π * r^2 def calculate_circle_area(self): return math.pi * self.radius**2 # Calculate and return the perimeter (circumference) of the circle using the formula: 2π * r def calculate_circle_perimeter(self): return 2 * math.pi * self.radius # Example usage # Prompt the user to input the radius of the circle and convert it to a floating-point number radius = float(input(\"Input the radius of the circle: \")) # Create a Circle object with the provided radius circle = Circle(radius) # Calculate the area of the circle using the calculate_circle_area method area = circle.calculate_circle_area() # Calculate the perimeter of the circle using the calculate_circle_perimeter method perimeter = circle.calculate_circle_perimeter() # Display the calculated area and perimeter of the circle print(\"Area of the circle:\", area) print(\"Perimeter of the circle:\", perimeter) Sample output\nInput the radius of the circle: 4 Area of the circle: 50.26548245743669 Perimeter of the circle: 25.132741228718345 "},"title":"Exercise 1"},"/methodologies/python-practice/secondpython/":{"data":{"":" 🎖️ Here it goes the second python exercise "},"title":"Exercise 2"},"/tutorial/":{"data":{"":"","bloques-de-código#Bloques de código":"","diagramas#Diagramas":"","elementos-adicionales#Elementos adicionales":"","enlaces#Enlaces":"","imagenes#Imagenes":"","listas#Listas":"","organización-de-archivos#Organización de archivos":"","tablas#Tablas":"","tutoriales-adicionales#Tutoriales adicionales":" ⛰️ En esta página se encuentra el tutorial para construir el sitio web de la asignatura de POO con todo tipo de contenidos. Organización de archivos Dentro de cada carpeta existe un número de archivos y carpetas que se describen a continuación:\ncontent _index.md docs _index.md El resto de archivos POO-concepts _index.md El resto de archivos donde estarán los conceptos de POO languages _index.md El resto de archivos donde estarán los conceptos de POO para cada lenguaje de programación about _index.md El resto de archivos con información del curso practice _index.md El resto de archivos donde estarán los ejercicios Javascript-practice _index.md El resto de archivos donde estarán los ejercicios de Javascript Python-practice _index.md El resto de archivos donde estarán los ejercicios de Python hugo.yaml → Donde está la configuración de la página Títulos y textos Para generar un título se utiliza el símbolo # seguido del título. El número de # indica el nivel de título. Por ejemplo, para generar un título de primer nivel se utiliza # Título de primer nivel. Para generar un título de segundo nivel se utiliza ## Título de segundo nivel. Y así sucesivamente.\nEl texto se puede resaltar utilizando el símbolo *. Por ejemplo, para generar un texto en negrita se utiliza **Texto en negrita**. Para generar un texto en cursiva se utiliza *Texto en cursiva*. Y así sucesivamente.\nListas Para generar una lista se utiliza el símbolo - seguido del elemento de la lista. Por ejemplo, para generar una lista con los elementos elemento1, elemento2 y elemento3 se utiliza:\n- elemento1 - elemento2 - elemento3 Si se quiere hacer una lista ordenada secuencialmente, se utiliza el símbolo 1. seguido del elemento de la lista. Por ejemplo, para generar una lista con los elementos elemento1, elemento2 y elemento3 se utiliza:\n1. elemento1 2. elemento2 3. elemento3 Si se quiere hacer una lista anidada, se utiliza el símbolo - seguido del elemento de la lista. Por ejemplo, para generar una lista con los elementos elemento1, elemento2 y elemento3 se utiliza:\n- elemento1 - elemento2 - elemento3 Imagenes Para insertar una imagen se utiliza el siguiente código:\n![Texto alternativo](/ruta/a/la/imagen) por ejemplo, si queremos poner la imagen de este link https://source.unsplash.com/featured/800x600?landscape, se utiliza:\n![Texto alternativo](https://source.unsplash.com/featured/800x600?landscape) y el resultado será así Videos Para insertar un video se utiliza el siguiente código:\n{{\u003c youtube id_del_video \u003e}} por ejemplo, si queremos poner el video de este link https://www.youtube.com/watch?v=Da-2h2B4faU, se utiliza:\n{{\u003c youtube Da-2h2B4faU \u003e}} y el resultado será así Bloques de código Para insertar un bloque de código se utiliza la siguiente sintaxis usando backticks (`):\n```el lenguaje en el que queremos poner el código el código que queremos poner ``` por ejemplo, si queremos poner un bloque de código en Python, se utiliza:\n```python def say_hello(): print(\"Hello!\") ``` y el resultado será así\ndef say_hello(): print(\"Hello!\") Bloques de código con números de linea Para insertar un bloque de código con números de linea se utiliza linenos=table y opcionalmente se pone linenostart=(número de línea) para definir en qué número de línea empieza el código. Todo esto usando la siguiente sintaxis y usando backticks (`):\n```el lenguaje que queremos poner{linenos=table, linenostart=(número de línea)} el código que queremos poner ``` por ejemplo, si queremos poner un bloque de código en Python, se utiliza:\n```python{linenos=table, linenostart=18} def say_hello(): print(\"Hello!\") ``` y el resultado será así\n18 19 def say_hello(): print(\"Hello!\") Copiar código El botón de copiado está activado por default para cada bloque de código.\nEnlaces Para insertar un enlace se utiliza la siguiente sintaxis:\n[Texto del enlace](/ruta/al/enlace) por ejemplo, si queremos poner un enlace a la página principal de la asignatura, se utiliza:\n[Enlace a la página principal](https://arojaspe.github.io/Hugo-POO-UN/) y el resultado será así\nEnlace a la página principal\nTablas Para insertar una tabla se utiliza la siguiente sintaxis:\n| Columna 1 | Columna 2 | Columna 3 | |-----------|-----------|-----------| | Elemento 1 | Elemento 2 | Elemento 3 | |------------|------------|------------| | Elemento 4 | Elemento 5 | Elemento 6 | y el resultado será así\nColumna 1 Columna 2 Columna 3 Elemento 1 Elemento 2 Elemento 3 Diagramas Para insertar un diagrama se utiliza Mermaid. Mermaid es una herramienta basada en Javascript que permite generar diagramas y diagramas de flujo a partir de texto. Para más información sobre Mermaid, se puede consultar la documentación oficial. Se pueden generar todo tipo de diagramas, como diagramas de flujo, diagramas de secuencia, diagramas de clases, diagramas de Gantt, etc. Para insertar un diagrama se utiliza la siguiente sintaxis:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` y el resultado será así\ngraph TD;\rA--\u003eB;\rA--\u003eC;\rB--\u003eD;\rC--\u003eD;Se recomienda el uso de un editor de Mermaid para facilitar la construcción del diagrama como Mermaid.live\nElementos adicionales Callouts Un callout es un elemento que permite resaltar un texto. Para insertar un callout se utiliza la siguiente sintaxis:\nCallout default {{\u003c callout \u003e}} En esta página se encuentra el tutorial para construir el sitio web de la asignatura de POO. {{\u003c /callout \u003e}} y el resultado será así\nEn esta página se encuentra el tutorial para construir el sitio web de la asignatura de POO. Callout de información {{\u003c callout type=\"info\" \u003e}} En este callout se encuentra información importante. {{\u003c /callout \u003e}} y el resultado será así\nℹ️ En este callout se encuentra información importante. Callout de advertencia {{\u003c callout type=\"warning\" \u003e}} Este callout está pensado para atraer la atención de quien lo lee. {{\u003c /callout \u003e}} y el resultado será así\n⚠️ Este callout está pensado para atraer la atención de quien lo lee. Callout de error {{\u003c callout type=\"error\" \u003e}} Este callout está pensado para indicar que algo ha salido mal. {{\u003c /callout \u003e}} y el resultado será así\n🚫 Este callout está pensado para indicar que algo ha salido mal. Botones (cards) Un botón es un elemento que permite resaltar un enlace. Para insertar un botón se utiliza la siguiente sintaxis:\n{{\u003c cards \u003e}} {{\u003c card link=\"la ruta del archivo al que se quiere dirigir\" title=\"Nombre botón\" icon=\"ícono\" \u003e}} {{\u003c card link=\"/ruta\" title=\"Siguiente botón\" \u003e}} {{\u003c /cards \u003e}} Botón de ejemplo Botón secundario Los nombres de los íconos pueden ser reemplazados por los disponibles en Heroicons\nTutoriales adicionales Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference Hextra guide ","títulos-y-textos#Títulos y textos":"","videos#Videos":""},"title":"Tutorial"}}